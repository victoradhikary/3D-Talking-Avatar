/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/models/66dd7892bbbc5e3804548055.glb -o src/components/Avatar.jsx -r public 
*/

import React, { useEffect, useRef, useState ,useMemo} from 'react';
import { useFrame, useGraph, useLoader } from '@react-three/fiber';
import { useAnimations, useFBX, useGLTF } from '@react-three/drei';
import { SkeletonUtils } from 'three-stdlib';
import { useControls } from 'leva';
import * as THREE from "three";


const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

export function Avatar(props) {
  const { scene } = useGLTF('/models/66dd7892bbbc5e3804548055.glb');

  const{playAudio , script} = useControls({
    playAudio:false,
    script: {
      value: "welcome",
      options:["welcome"]
    },
  });

//  const audio = useMemo(()=> Audio(`/audios/${script}.mp3`),[script]);
 const audio = useMemo(() => new Audio(`/audios/${script}.ogg`), [script]);
 const jsonFile = useLoader(THREE.FileLoader, `/audios/${script}.json`);
 const lipsync = JSON.parse(jsonFile);

 useFrame(()=>{
  const currentAudioTime = audio.currentTime;
  if (audio.paused || audio.ended){
    setAnimation("Idle");
  }
 })

 useFrame(()=>{
  const currentAudioTime = audio.currentTime;

  Object.values(corresponding).forEach((value)=>{
    nodes.Wolf3D_Head.morphTargetInfluences[
      nodes.Wolf3D_Head.morphTargetDictionary[value]
    ] = 0;
    nodes.Wolf3D_Teeth.morphTargetInfluences[
      nodes.Wolf3D_Teeth.morphTargetDictionary[value]
    ] = 0;
  })

  for (let i = 0; i < lipsync.mouthCues.length; i++){
    const mouthCue = lipsync.mouthCues[i];
    if(currentAudioTime>= mouthCue.start && currentAudioTime <= mouthCue.end){
      console.log(mouthCue.value);
      nodes.Wolf3D_Head.morphTargetInfluences[
        nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]
      ] = 1;
      nodes.Wolf3D_Teeth.morphTargetInfluences[
        nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value]]
      ] = 1;
      break;
    }
  }
 })


//  useEffect(()=>{
//    if (playAudio) {
//      audio.play();
//    }else{
//     audio.pause();
//    }
//  }, [playAudio,script])

useEffect(() => {
  if (playAudio) {
    audio.play();
    if (script == "welcome") {
      setAnimation("Talking");
      
    }else{
      setAnimation("Idle")
    }
  } else {
    setAnimation("Idle")
    audio.pause();
  }
  return () => {
    audio.pause();
    audio.currentTime = 0; // Reset audio to the start when the component unmounts or audio changes.
  };
}, [playAudio, script]);

  const { animations: IdleAnimation } = useFBX('/animations/Idle.fbx');
  const { animations: TalkingAnimation } = useFBX('/animations/Talking.fbx');

  // Add logging to check if animations are loaded correctly
  console.log('Idle Animation:', IdleAnimation);
  console.log('Talking Animation:', TalkingAnimation);

  if (IdleAnimation && IdleAnimation[0]) IdleAnimation[0].name = 'Idle';
  if (TalkingAnimation && TalkingAnimation[0]) TalkingAnimation[0].name = 'Talking';

  const [animation, setAnimation] = useState('Idle');

  const group = useRef();
  const { actions } = useAnimations(
    [IdleAnimation ? IdleAnimation[0] : null, TalkingAnimation ? TalkingAnimation[0] : null],
    group
  );



  // Ensure actions are available before attempting to use them
  useEffect(() => {
    if (actions && actions[animation]) {
      actions[animation].reset().fadeIn(0.5).play();
      return () => actions[animation]?.fadeOut(0.5);
    }
  }, [animation, actions]);

  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload('/models/66dd7892bbbc5e3804548055.glb');
